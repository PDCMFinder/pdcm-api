# To use the Docker Hub docker image
#image: docker:latest
image: $CI_REGISTRY/mouse-informatics/docker:latest

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using the Kubernetes executor, the variable should be set to
  # tcp://localhost:2375/ because of how the Kubernetes executor connects services
  # to the job container
  # DOCKER_HOST: tcp://localhost:2375/
  #
  # For non-Kubernetes executors, we use tcp://docker:2375/
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

  # Since the docker:dind container and the runner container don’t share their root
  # filesystem, the job’s working directory can be used as a mount point for children
  # containers. For example, if you have files you want to share with a child container,
  # you may create a subdirectory under /builds/$CI_PROJECT_PATH and use it as your
  # mount point.
  DEPLOYMENTS_DIR: /builds/$CI_PROJECT_PATH/deployments

  # For EBI you need to override the definition of CI_REGISTRY to remove the port number
  CI_REGISTRY: dockerhub.ebi.ac.uk
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH

  #NOW: $(date '+%Y-%m-%d-%H-%M-%S')
  #NOW: $(date '+%Y-%m-%d')

  # To solve the issue with the Docker in Docker 19.03 service.
  # Logged as: GitLab.com CI jobs failing if using docker:stable-dind image
  # see: https://gitlab.com/gitlab-com/gl-infra/production/issues/982
  DOCKER_TLS_CERTDIR: ""

stages:
  - deploy-dev
#  - deploy-prod

deploy-HH-WP-WEBADMIN-dev:
  stage: deploy-dev
  image: dtzar/helm-kubectl:2.13.0
  before_script:
    - mkdir -p $DEPLOYMENTS_DIR/HH-WP-WEBADMIN-dev
    - cp k8-deploy/* $DEPLOYMENTS_DIR/HH-WP-WEBADMIN-dev/
    - find ./ -type f -exec sed -i "s|<PGRST_NAMESPACE>|${DEV_PGRST_NAMESPACE}|g" {} \;
    - find ./ -type f -exec sed -i "s|<PGRST_OPENAPI_SERVER_PROXY_URI>|${DEV_PGRST_OPENAPI_SERVER_PROXY_URI}|g" {} \;
    - find ./ -type f -exec sed -i "s|<PGRST_DB_ANON_ROLE>|${DEV_PGRST_DB_ANON_ROLE}|g" {} \;
    - find ./ -type f -exec sed -i "s|<PGRST_DB_SCHEMA>|${DEV_PGRST_DB_SCHEMA}|g" {} \;
    - find ./ -type f -exec sed -i "s|<PGRST_DB_URI>|${DEV_PGRST_DB_URI}|g" {} \;
  script:
    - kubectl config set-cluster local --server="${HH_WP_WEBADMIN_ENDPOINT}"
    - kubectl config set clusters.local.certificate-authority-data "${HH_WP_WEBADMIN_CERTIFICATE_AUTHORITY}"
    - kubectl config set-credentials ${HH_WP_WEBADMIN_DEV_USER} --token="${HH_WP_WEBADMIN_DEV_USER_TOKEN}"
    - kubectl config set-context "${HH_WP_WEBADMIN_DEV_NAMESPACE}" --cluster=local --user=${HH_WP_WEBADMIN_DEV_USER} --namespace="${HH_WP_WEBADMIN_DEV_NAMESPACE}"
    - kubectl config use-context "${HH_WP_WEBADMIN_DEV_NAMESPACE}"
    - kubectl version
    - kubectl apply -f $DEPLOYMENTS_DIR/HH-WP-WEBADMIN-dev/postgrest-configmap.yaml

    - |
      if kubectl apply -f $DEPLOYMENTS_DIR/HH-WP-WEBADMIN-dev/postgrest-deployment.yaml --record | grep -q unchanged; then
          echo "=> Patching deployment to force image update."
          kubectl patch -f $DEPLOYMENTS_DIR/HH-WP-WEBADMIN-dev/postgrest-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
      else
        echo "=> Deployment apply has changed the object, no need to force image update."
      fi
    - kubectl get pods,service,deploy,replicaset,ing
  only:
    refs:
      - main